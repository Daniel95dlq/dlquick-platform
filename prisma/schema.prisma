// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  phone         String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id           String        @id @default(cuid())
  name         String        @unique
  slug         String        @unique
  description  String?
  image        String?
  isActive     Boolean       @default(true)
  order        Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  subcategories Subcategory[]
}

model Subcategory {
  id          String    @id @default(cuid())
  name        String
  slug        String
  description String?
  image       String?
  isActive    Boolean   @default(true)
  order       Int       @default(0)
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  services    Service[]
  
  @@unique([categoryId, slug])
}

model Service {
  id            String      @id @default(cuid())
  name          String
  slug          String
  description   String
  shortDesc     String?
  price         Decimal     @db.Decimal(10, 2)
  priceType     PriceType   @default(FIXED)
  duration      Int?        // in minutes
  isActive      Boolean     @default(true)
  featured      Boolean     @default(false)
  image         String?
  subcategoryId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  orders        Order[]
  
  @@unique([subcategoryId, slug])
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  serviceId       String
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  customerName    String
  customerEmail   String
  customerPhone   String
  pickupAddress   String?
  deliveryAddress String?
  scheduledDate   DateTime?
  completedAt     DateTime?
  notes           String?
  stripeSessionId String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  user            User        @relation(fields: [userId], references: [id])
  service         Service     @relation(fields: [serviceId], references: [id])
}

enum UserRole {
  USER
  AGENT
  BUSINESS
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PriceType {
  FIXED
  PER_HOUR
  PER_ITEM
  QUOTE
}
